// Cloudflare Pages Function –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã
export async function onRequestPost(context) {
  try {
    const { request } = context;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
    if (request.method !== 'POST') {
      return new Response('Method Not Allowed', { 
        status: 405,
        headers: {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'POST, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type'
        }
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
    let body;
    try {
      body = await request.json();
    } catch (error) {
      console.error('Failed to parse JSON:', error);
      return new Response(JSON.stringify({ 
        success: false, 
        message: 'Invalid JSON data' 
      }), {
        status: 400,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'POST, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type'
        }
      });
    }
    
    console.log('Received form data:', body);
    
    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!body.name || !body.email || !body.url || !body.message) {
      return new Response(JSON.stringify({ 
        success: false, 
        message: 'Missing required fields: name, email, url, message' 
      }), {
        status: 400,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'POST, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type'
        }
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ honeypot
    if (body.honeypot) {
      console.log('Honeypot triggered, treating as spam');
      return new Response(JSON.stringify({ 
        success: true, 
        message: 'Message sent successfully' 
      }), {
        status: 200,
        headers: { 
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'POST, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type'
        }
      });
    }
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Slack (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω webhook)
    const slackMessage = {
      text: `üéØ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç ${body.name}*`,
      blocks: [
        {
          type: "section",
          fields: [
            { type: "mrkdwn", text: `*–ò–º—è:*\n${body.name}` },
            { type: "mrkdwn", text: `*Email:*\n${body.email}` },
            { type: "mrkdwn", text: `*URL —Å–∞–π—Ç–∞:*\n${body.url}` },
            { type: "mrkdwn", text: `*–°—Ç–µ–∫:*\n${body.stack || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}` },
            { type: "mrkdwn", text: `*–†–µ–≥–∏–æ–Ω—ã:*\n${body.regions || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}` },
            { type: "mrkdwn", text: `*–Ø–∑—ã–∫–∏:*\n${body.languages || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}` }
          ]
        },
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: `*–°–æ–æ–±—â–µ–Ω–∏–µ:*\n${body.message}`
          }
        },
        {
          type: "section",
          fields: [
            { type: "mrkdwn", text: `*–õ–æ–∫–∞–ª—å:*\n${body.locale || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}` },
            { type: "mrkdwn", text: `*–í—Ä–µ–º—è:*\n${body.timestamp || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}` }
          ]
        }
      ]
    };
    
    console.log('Slack message prepared:', slackMessage);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Slack (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω webhook)
    const slackWebhook = context.env.CONTACT_SLACK_WEBHOOK;
    if (slackWebhook) {
      try {
        console.log('Sending to Slack webhook');
        const slackResponse = await fetch(slackWebhook, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(slackMessage)
        });
        
        if (slackResponse.ok) {
          console.log('Slack message sent successfully');
        } else {
          console.error('Slack API error:', await slackResponse.text());
        }
      } catch (slackError) {
        console.error('Slack webhook error:', slackError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ Slack –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      }
    } else {
      console.log('CONTACT_SLACK_WEBHOOK environment variable not set, skipping Slack notification');
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return new Response(JSON.stringify({ 
      success: true, 
      message: 'Thank you! We will contact you soon.' 
    }), {
      status: 200,
      headers: { 
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type'
      }
    });
    
  } catch (error) {
    console.error('Contact form error:', error);
    
    return new Response(JSON.stringify({ 
      success: false, 
      message: 'Internal server error' 
    }), {
      status: 500,
      headers: { 
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type'
      }
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è CORS
export async function onRequestOptions(context) {
  return new Response(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type'
    }
  });
}
