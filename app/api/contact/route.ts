import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { name, email, url, message, stack, regions, languages, preferredCmp, integrations, locale, timestamp, userAgent } = body

    console.log('=== CONTACT FORM SUBMISSION START ===')
    console.log('Received data:', { name, email, url, message, stack, regions, languages, preferredCmp, integrations, locale, timestamp, userAgent })

    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || !email || !message) {
      console.log('Validation failed: missing required fields')
      return NextResponse.json(
        { error: 'Name, email and message are required' },
        { status: 400 }
      )
    }

    console.log('Validation passed, proceeding with Slack notification...')

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack
    const slackWebhookUrl = process.env.SLACK_WEBHOOK_URL
    
    console.log('Slack webhook URL configured:', !!slackWebhookUrl)
    if (slackWebhookUrl) {
      console.log('Webhook URL starts with:', slackWebhookUrl.substring(0, 30) + '...')
    }
    
    if (slackWebhookUrl) {
      try {
        console.log('Preparing Slack message...')
        
        const slackMessage = {
          text: 'üéØ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ C&C CookieComply*',
          blocks: [
            {
              type: 'section',
              fields: [
                {
                  type: 'mrkdwn',
                  text: `*–ò–º—è:*\n${name}`
                },
                {
                  type: 'mrkdwn',
                  text: `*Email:*\n${email}`
                },
                {
                  type: 'mrkdwn',
                  text: `*–°–∞–π—Ç:*\n${url || '–ù–µ —É–∫–∞–∑–∞–Ω'}`
                },
                {
                  type: 'mrkdwn',
                  text: `*–°—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:*\n${stack || '–ù–µ —É–∫–∞–∑–∞–Ω'}`
                },
                {
                  type: 'mrkdwn',
                  text: `*–†–µ–≥–∏–æ–Ω—ã:*\n${regions || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}`
                },
                {
                  type: 'mrkdwn',
                  text: `*–Ø–∑—ã–∫–∏:*\n${languages || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}`
                },
                {
                  type: 'mrkdwn',
                  text: `*–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π CMP:*\n${preferredCmp || '–ù–µ —É–∫–∞–∑–∞–Ω'}`
                },
                {
                  type: 'mrkdwn',
                  text: `*–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:*\n${integrations || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}`
                },
                {
                  type: 'mrkdwn',
                  text: `*–Ø–∑—ã–∫ —Å–∞–π—Ç–∞:*\n${locale || '–ù–µ —É–∫–∞–∑–∞–Ω'}`
                },
                {
                  type: 'mrkdwn',
                  text: `*–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:*\n${timestamp || new Date().toISOString()}`
                }
              ]
            },
            {
              type: 'section',
              text: {
                type: 'mrkdwn',
                text: `*–°–æ–æ–±—â–µ–Ω–∏–µ:*\n${message}`
              }
            },
            {
              type: 'context',
              elements: [
                {
                  type: 'mrkdwn',
                  text: `üåê User-Agent: ${userAgent || '–ù–µ —É–∫–∞–∑–∞–Ω'}`
                }
              ]
            }
          ]
        }

        console.log('Slack message prepared:', JSON.stringify(slackMessage, null, 2))
        console.log('Sending to Slack webhook...')

        const slackResponse = await fetch(slackWebhookUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(slackMessage)
        })

        console.log('Slack response status:', slackResponse.status)
        console.log('Slack response status text:', slackResponse.statusText)

        if (!slackResponse.ok) {
          const errorText = await slackResponse.text()
          console.error('Slack webhook error response:', errorText)
          console.error('Slack webhook error:', slackResponse.status, slackResponse.statusText)
        } else {
          console.log('Slack notification sent successfully!')
        }
              } catch (slackError) {
          console.error('Failed to send Slack notification:', slackError)
          if (slackError instanceof Error) {
            console.error('Error details:', {
              name: slackError.name,
              message: slackError.message,
              stack: slackError.stack
            })
          } else {
            console.error('Unknown error type:', typeof slackError)
          }
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ Slack –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        }
    } else {
      console.warn('SLACK_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è')
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('Contact form submission completed successfully')
    console.log('=== CONTACT FORM SUBMISSION END ===')

    return NextResponse.json(
      { success: true, message: 'Message sent successfully' },
      { status: 200 }
    )
  } catch (error) {
    console.error('=== CONTACT FORM SUBMISSION ERROR ===')
    console.error('Contact API error:', error)
    if (error instanceof Error) {
      console.error('Error details:', {
        name: error.name,
        message: error.message,
        stack: error.stack
      })
    } else {
      console.error('Unknown error type:', typeof error)
    }
    console.error('=== CONTACT FORM SUBMISSION ERROR END ===')
    
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
