import { NextRequest, NextResponse } from 'next/server'
import { ContactSchema } from '@/lib/schema'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    console.log('Received form data:', body)
    
    // Validate with Zod
    const validatedData = ContactSchema.parse(body)
    console.log('Validated data:', validatedData)
    
    // Check honeypot
    if (validatedData.honeypot) {
      console.log('Honeypot triggered, treating as spam')
      return NextResponse.json({ success: true, message: 'Message sent successfully' })
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Slack —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω webhook
    if (process.env.CONTACT_SLACK_WEBHOOK) {
      try {
        const slackMessage = {
          text: `üéØ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç ${validatedData.name}*`,
          blocks: [
            {
              type: "section",
              fields: [
                { type: "mrkdwn", text: `*–ò–º—è:*\n${validatedData.name}` },
                { type: "mrkdwn", text: `*Email:*\n${validatedData.email}` },
                { type: "mrkdwn", text: `*URL —Å–∞–π—Ç–∞:*\n${validatedData.url}` },
                { type: "mrkdwn", text: `*–°—Ç–µ–∫:*\n${validatedData.stack}` },
                { type: "mrkdwn", text: `*–†–µ–≥–∏–æ–Ω—ã:*\n${validatedData.regions}` },
                { type: "mrkdwn", text: `*–Ø–∑—ã–∫–∏:*\n${validatedData.languages}` }
              ]
            },
            {
              type: "section",
              text: {
                type: "mrkdwn",
                text: `*–°–æ–æ–±—â–µ–Ω–∏–µ:*\n${validatedData.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`
              }
            },
            {
              type: "section",
              fields: [
                { type: "mrkdwn", text: `*–õ–æ–∫–∞–ª—å:*\n${validatedData.locale}` },
                { type: "mrkdwn", text: `*–í—Ä–µ–º—è:*\n${validatedData.timestamp || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}` }
              ]
            }
          ]
        }
        
        console.log('Slack message prepared:', slackMessage)
        
        const slackResponse = await fetch(process.env.CONTACT_SLACK_WEBHOOK, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(slackMessage)
        })
        
        if (slackResponse.ok) {
          console.log('Slack message sent successfully')
        } else {
          console.error('Slack API error:', await slackResponse.text())
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ Slack –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        }
      } catch (slackError) {
        console.error('Slack integration error:', slackError)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ Slack –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      }
    } else {
      console.warn('CONTACT_SLACK_WEBHOOK environment variable not set - skipping Slack notification')
    }
    
    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞
    return NextResponse.json({ 
      success: true, 
      message: 'Thank you! We will contact you soon.' 
    })
    
  } catch (error) {
    console.error('Contact form error:', error)
    
    if (error instanceof Error) {
      return NextResponse.json(
        { success: false, message: 'Validation error: ' + error.message },
        { status: 400 }
      )
    }
    
    return NextResponse.json(
      { success: false, message: 'Internal server error' },
      { status: 500 }
    )
  }
}
