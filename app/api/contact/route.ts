import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { name, email, url, message, stack, regions, languages, preferredCmp, integrations, locale, timestamp, userAgent } = body

    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || !email || !message) {
      return NextResponse.json(
        { error: 'Name, email and message are required' },
        { status: 400 }
      )
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack
    const slackWebhookUrl = process.env.SLACK_WEBHOOK_URL
    
    if (slackWebhookUrl) {
      try {
        const slackMessage = {
          text: 'üéØ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ C&C CookieComply*',
          blocks: [
            {
              type: 'section',
              fields: [
                {
                  type: 'mrkdwn',
                  text: `*–ò–º—è:*\n${name}`
                },
                {
                  type: 'mrkdwn',
                  text: `*Email:*\n${email}`
                },
                {
                  type: 'mrkdwn',
                  text: `*–°–∞–π—Ç:*\n${url || '–ù–µ —É–∫–∞–∑–∞–Ω'}`
                },
                {
                  type: 'mrkdwn',
                  text: `*–°—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:*\n${stack || '–ù–µ —É–∫–∞–∑–∞–Ω'}`
                },
                {
                  type: 'mrkdwn',
                  text: `*–†–µ–≥–∏–æ–Ω—ã:*\n${regions || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}`
                },
                {
                  type: 'mrkdwn',
                  text: `*–Ø–∑—ã–∫–∏:*\n${languages || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}`
                },
                {
                  type: 'mrkdwn',
                  text: `*–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π CMP:*\n${preferredCmp || '–ù–µ —É–∫–∞–∑–∞–Ω'}`
                },
                {
                  type: 'mrkdwn',
                  text: `*–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:*\n${integrations || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}`
                },
                {
                  type: 'mrkdwn',
                  text: `*–Ø–∑—ã–∫ —Å–∞–π—Ç–∞:*\n${locale || '–ù–µ —É–∫–∞–∑–∞–Ω'}`
                },
                {
                  type: 'mrkdwn',
                  text: `*–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:*\n${timestamp || new Date().toISOString()}`
                }
              ]
            },
            {
              type: 'section',
              text: {
                type: 'mrkdwn',
                text: `*–°–æ–æ–±—â–µ–Ω–∏–µ:*\n${message}`
              }
            },
            {
              type: 'context',
              elements: [
                {
                  type: 'mrkdwn',
                  text: `üåê User-Agent: ${userAgent || '–ù–µ —É–∫–∞–∑–∞–Ω'}`
                }
              ]
            }
          ]
        }

        const slackResponse = await fetch(slackWebhookUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(slackMessage)
        })

        if (!slackResponse.ok) {
          console.error('Slack webhook error:', slackResponse.status, slackResponse.statusText)
        } else {
          console.log('Slack notification sent successfully')
        }
      } catch (slackError) {
        console.error('Failed to send Slack notification:', slackError)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ Slack –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      }
    } else {
      console.warn('SLACK_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('Contact form submission:', { name, email, url, message, stack, regions, languages, preferredCmp, integrations, locale, timestamp, userAgent })

    return NextResponse.json(
      { success: true, message: 'Message sent successfully' },
      { status: 200 }
    )
  } catch (error) {
    console.error('Contact API error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
