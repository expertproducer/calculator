// Cloudflare Function –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã
export async function onRequestPost(context) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const body = await context.request.json()
    const { name, email, message, url, stack, regions, languages, preferredCmp, integrations, locale, timestamp, userAgent } = body

    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || !email || !message) {
      return new Response(
        JSON.stringify({ 
          success: false, 
          message: 'Name, email and message are required' 
        }),
        { 
          status: 400,
          headers: {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type'
          }
        }
      )
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('Contact form submission:', { 
      name, 
      email, 
      message, 
      url, 
      stack, 
      regions, 
      languages, 
      preferredCmp, 
      integrations, 
      locale, 
      timestamp, 
      userAgent 
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack
    const slackWebhookUrl = context.env.CONTACT_SLACK_WEBHOOK;
    
    if (slackWebhookUrl) {
      try {
        console.log('Sending Slack notification...');
        
        const slackMessage = {
          text: 'üéØ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ C&C CookieComply*',
          blocks: [
            {
              type: 'section',
              fields: [
                { type: 'mrkdwn', text: `*–ò–º—è:*\n${name}` },
                { type: 'mrkdwn', text: `*Email:*\n${email}` },
                { type: 'mrkdwn', text: `*–°–∞–π—Ç:*\n${url || '–ù–µ —É–∫–∞–∑–∞–Ω'}` },
                { type: 'mrkdwn', text: `*–°—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:*\n${stack || '–ù–µ —É–∫–∞–∑–∞–Ω'}` },
                { type: 'mrkdwn', text: `*–†–µ–≥–∏–æ–Ω—ã:*\n${regions || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}` },
                { type: 'mrkdwn', text: `*–Ø–∑—ã–∫–∏:*\n${languages || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}` },
                { type: 'mrkdwn', text: `*–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π CMP:*\n${preferredCmp || '–ù–µ —É–∫–∞–∑–∞–Ω'}` },
                { type: 'mrkdwn', text: `*–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:*\n${integrations || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}` },
                { type: 'mrkdwn', text: `*–Ø–∑—ã–∫ —Å–∞–π—Ç–∞:*\n${locale || '–ù–µ —É–∫–∞–∑–∞–Ω'}` },
                { type: 'mrkdwn', text: `*–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:*\n${timestamp || new Date().toISOString()}` }
              ]
            },
            {
              type: 'section',
              text: {
                type: 'mrkdwn',
                text: `*–°–æ–æ–±—â–µ–Ω–∏–µ:*\n${message}`
              }
            },
            {
              type: 'context',
              elements: [
                {
                  type: 'mrkdwn',
                  text: `üåê User-Agent: ${userAgent || '–ù–µ —É–∫–∞–∑–∞–Ω'}`
                }
              ]
            }
          ]
        };

        const slackResponse = await fetch(slackWebhookUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(slackMessage)
        });

        if (slackResponse.ok) {
          console.log('Slack notification sent successfully!');
        } else {
          console.error('Slack webhook error:', slackResponse.status, slackResponse.statusText);
        }
      } catch (slackError) {
        console.error('Slack notification failed:', slackError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ Slack –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      }
    } else {
      console.warn('CONTACT_SLACK_WEBHOOK –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ SendGrid, Mailgun –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã
    
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    return new Response(
      JSON.stringify({ 
        success: true, 
        message: 'Message sent successfully' 
      }),
      { 
        status: 200,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'POST, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type'
        }
      }
    )
  } catch (error) {
    console.error('Contact API error:', error)
    return new Response(
      JSON.stringify({ 
        success: false, 
        message: 'Internal server error' 
      }),
      { 
        status: 500,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'POST, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type'
        }
      }
    )
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è CORS
export async function onRequestOptions() {
  return new Response(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type'
    }
  })
}
