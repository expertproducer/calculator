const fs = require('fs');
const path = require('path');

console.log('üìÅ Copying files after build...');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É functions –≤ out –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const functionsDir = path.join('out', 'functions');
if (!fs.existsSync(functionsDir)) {
    fs.mkdirSync(functionsDir, { recursive: true });
    console.log('‚úÖ Created functions directory');
}

// –ö–æ–ø–∏—Ä—É–µ–º _worker.js –≤ –∫–æ—Ä–µ–Ω—å out
const workerSource = path.join('functions', '_worker.js');
const workerDest = path.join('out', '_worker.js');

if (fs.existsSync(workerSource)) {
    fs.copyFileSync(workerSource, workerDest);
    console.log('‚úÖ Copied _worker.js to out/');
} else {
    console.log('‚ùå _worker.js not found in functions/');
}

// –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É api
const apiSource = path.join('functions', 'api');
const apiDest = path.join('out', 'functions', 'api');

if (fs.existsSync(apiSource)) {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É api –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(apiDest)) {
        fs.mkdirSync(apiDest, { recursive: true });
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ api
    const files = fs.readdirSync(apiSource);
    files.forEach(file => {
        const sourceFile = path.join(apiSource, file);
        const destFile = path.join(apiDest, file);
        fs.copyFileSync(sourceFile, destFile);
        console.log(`‚úÖ Copied ${file} to out/functions/api/`);
    });
} else {
    console.log('‚ùå API directory not found in functions/');
}

console.log('üéâ File copying completed!');
